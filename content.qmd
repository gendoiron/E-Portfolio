---
title: "Content & Deliverables"
format: html
editor: visual
---

# Save Cable Bay

cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay

## Leaflet

```{r}

```

---
gif: "C:/Users/ggdoiron.stu/OneDrive - UBC/Documents/GitHub/E-Portfolio/gif/4_pointcloud_norm_Z_750x750_black_2degree_10fps.gif"
---

## Maps

Proposed Developments

Proposed Developments Proposed Developments Proposed Developments Proposed Developments Proposed Developments Proposed Developments Proposed Developments Proposed Developments Proposed Developments Proposed Developments

![](images/clipboard-1755856040.jpeg)

Alternative Developments

Alternative Developments Alternative Developments Alternative Developments Alternative Developments Alternative Developments Alternative Developments Alternative Developments Alternative Developments Alternative Developments Alternative Developments Alternative Developments Alternative Developments Alternative Developments Alternative Developments

![](images/clipboard-2196079768.jpeg)

# Individual Tree Segmentation

Sample code snippet. Notice that you can provide a toggle to switch between coding languages - this is referred to as a 'tabset' in quarto. It is good practice to try and convert your R code to python, and vice-versa to demonstrate coding proficiency. For example, let's showcase a function for calculating NDVI in R and Python.

## Visualization

## Code Snippets

Sample code snippet. Notice that you can provide a toggle to switch between coding languages - this is referred to as a 'tabset' in quarto. It is good practice to try and convert your R code to python, and vice-versa to demonstrate coding proficiency. For example, let's showcase a function for calculating NDVI in R and Python.

::: {.panel-tabset group="language"}
## Segmentation Method: Li 2012

``` (.r)
# Read in plots    
plots <- list.files(path = "Plots", pattern = "\\.las$", full.names = TRUE)

# For Loop to loop through the plots and segment
for(i in plots){
  output_dir <- "li_trees"
  las <- readLAS(i)
  li_trees <- segment_trees(las, li2012(dt1 = 1.5, dt2 = 2, Zu = 15, hmin = 2, speed_up = 10))
  plot(li_trees, color = "treeID", pal = (pastel.colors(200)))
  output_file <- file.path(output_dir, paste0("segmented_", basename(i)))
  writeLAS(li_trees, output_file)
}
```

## Segmentation Method: Dalponte 2016

``` (.python)
# Create a canopy height model
CHM_1 <- rasterize_canopy(MKRF_Plot_1, res = 0.5, pitfree(c(0,10,20,30), subcircle = 0.2, max_edge = (c(0,1))))

# Locate Tree Tops (local maximums)
ttops_1 <-  locate_trees(CHM_1, lmf(ws=5, hmin=2))

# Segment using Dalponte 2016
plot1_seg_dal <- segment_trees(MKRF_Plot_1, dalponte2016(CHM_1, ttops_1))
```

(Assuming *nir* and *red* are numpy arrays)
:::

## Code

## Visualizations

# Hydrology Analysis

![](images/clipboard-3256993127.png)

# Least Cost Path Analysis
