---
title: "Content & Deliverables"
format: html
editor: visual
---

# Save Cable Bay

cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay cablebay

## Leaflet

```{r}

```

---
gif: "C:/Users/ggdoiron.stu/OneDrive - UBC/Documents/GitHub/E-Portfolio/gif/4_pointcloud_norm_Z_750x750_black_2degree_10fps.gif"
---

## Maps

Proposed Developments

Proposed Developments Proposed Developments Proposed Developments Proposed Developments Proposed Developments Proposed Developments Proposed Developments Proposed Developments Proposed Developments Proposed Developments

![](images/clipboard-1755856040.jpeg)

Alternative Developments

Alternative Developments Alternative Developments Alternative Developments Alternative Developments Alternative Developments Alternative Developments Alternative Developments Alternative Developments Alternative Developments Alternative Developments Alternative Developments Alternative Developments Alternative Developments Alternative Developments

![](images/clipboard-2196079768.jpeg)

# Individual Tree Segmentation

\
This project demonstrates individual tree segmentation (ITS) and subsequent visualizatoin using LiDAR data. I highlight both canopy height model-based and point cloud-based methods for tree detection and segmentation. Specifically, the code snippets show the application of two algorthims: **`li2012`** and **`dalponte2016`**.

### Skills & Tools Used:

-   **R Programming:** Utilized R for data manipulation, analysis, and visualization.

-   **LiDAR Processing:** Used the **`lidR`** package to load, filter, and normalize LiDAR data, removing outliers and correcting for ground elevation.

-   **Tree Segmentation:** Applied the **`li2012`** algorithm on the point cloud data for tree segmentation and used the **`dalponte2016`** algorithm on CHM data to detect tree tops and segment individual trees.

-   **Visualization:** Created 3D visualizations of segmented trees using the **`rgl`** package and compared results from both methods.

-   **Raster Analysis:** Generated Canopy Height Models (CHM) at 0.5m resolution using **`terra`** to improve segmentation accuracy.

## Visualization

## Code Snippets

For both approaches I extracted a plot and subsequently pre-processed the data to remove noise and normalize the point cloud.

::: {.panel-tabset group="language"}
## Point Cloud Approach: Li 2012

``` (.r)
# Read in plots    
plots <- list.files(path = "Plots", pattern = "\\.las$", full.names = TRUE)

# For Loop to loop through the plots and segment
for(i in plots){
  output_dir <- "li_trees"
  las <- readLAS(i)
  li_trees <- segment_trees(las, li2012(dt1 = 1.5, dt2 = 2, Zu = 15, hmin = 2, speed_up = 10))
  plot(li_trees, color = "treeID", pal = (pastel.colors(200)))
  output_file <- file.path(output_dir, paste0("segmented_", basename(i)))
  writeLAS(li_trees, output_file)
}
```

## Canopy Height Model Approach: Dalponte 2016

``` (.python)
# Create a canopy height model
CHM_1 <- rasterize_canopy(MKRF_Plot_1, res = 0.5, pitfree(c(0,10,20,30), subcircle = 0.2, max_edge = (c(0,1))))

# Locate Tree Tops (local maximums)
ttops_1 <-  locate_trees(CHM_1, lmf(ws=5, hmin=2))

# Segment using Dalponte 2016
plot1_seg_dal <- segment_trees(MKRF_Plot_1, dalponte2016(CHM_1, ttops_1))
```

(Optionally could smooth the CHM prior to tree detection)
:::

Automatic individual tree segmentation is an evolving area of research with significant potential in forest management and ecological studies. While it can provide valuable insights into tree attributes such as height, crown diameter, and canopy structure, its accuracy is still limited, particularly in dense and complex forest environments. Despite these challenges, this technique offers promising applications in biodiversity monitoring, carbon stock estimation, forest health assessments, and precision forestry, where understanding individual tree characteristics is crucial for sustainable management and conservation efforts.

# Hydrology Analysis

![](images/clipboard-3256993127.png)

# Least Cost Path Analysis

**Grizzly Bear Movement Modeling**\
In this project, I conducted a Least Cost Path (LCP) analysis to model Grizzly Bear movement across the Yellowhead region, using various environmental and human factors to assess movement costs. The goal was to identify the most efficient route between two points in the landscape.\
**Skills & Tools Used:**

-   **QGIS & ArcGIS Pro**: Utilized both QGIS for raster manipulation and ArcGIS Pro for the final LCP analysis, showcasing proficiency in both platforms.

-   **Raster Analysis**: Used tools like "**Slope**," "**Reclassify**," and "**Raster** **Calculator**" in QGIS to derive cost surfaces based on slope, land cover, and road proximity.

-   **Reclassification & Weighting**: Reclassified land cover data to assign resistance values and weighted layers to combine them into a unified cost surface.

-   **Proximity Analysis**: Created distance-to-roads rasters and applied cost models to factor in human infrastructure's impact on bear movement.

-   **Least Cost Path Analysis**: Applied the "**Distance** **Accumulation**" and "**Optimal** **Path** **as** **Line**" tools in ArcGIS Pro to trace the most efficient path, integrating all cost factors.

**Results:**\
The least cost path model revealed that Grizzly Bears would most likely avoid steep slopes and areas with high human infrastructure, favoring routes through forested and wetland areas. The weighted cost surface emphasized the avoidance of roads and areas with high land cover resistance, resulting in paths that were longer but more likely to offer safer movement corridors. This model can be used to inform conservation strategies and guide habitat protection efforts.
